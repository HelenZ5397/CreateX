package com.company;
import javax.swing.JFrame;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Tree extends JFrame {
    private JTree tree;
    public Tree(String filename)
    {
        try {
            //create the root node
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("UserInput");
            //create the child nodes
            File note = new File(filename);
            Scanner reader = new Scanner(note);
            String n = RecursiveAdder(root, reader, "/t", -1);

            //create the tree by passing in the root node
            tree = new JTree(root);
            add(tree);

            this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.setTitle("JTree Example");
            this.pack();
            this.setVisible(true);

        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }

    public String RecursiveAdder(DefaultMutableTreeNode r, Scanner reader, String tab, int count) {
        //*okay making changes, this is keeping track of previous and next strings to become more flexible


        if(!reader.hasNextLine()){
            return null;
        } else {
            String strC = reader.nextLine();
            while(strC != null) {//while current string is not null
                int tcount = 0;
                //Getting count of tab symbol**********
                for (int i = 0; i < strC.length(); i++) {
                    int T = 0;//counter for tab symbol length
                    //can implement more efficient pattern matching
                    for (int j = 0; j < tab.length(); j++) {
                        if (strC.charAt(i) == tab.charAt(j)) {
                            i++;
                            j++;
                            T++;
                        }
                    }
                    if (T+1 == tab.length()) {
                        tcount++;
                    }
                }
                //Getting count of tab symbol---------- *pay attention to see if tcount needs to be reset

                //Scenarios**********
                if (tcount > count) {
                    //so this enters a new tab space and indicate that the content is the child of the input node
                    DefaultMutableTreeNode c = new DefaultMutableTreeNode(strC);
                    r.add(c);
                    strC = RecursiveAdder(c,reader,tab,tcount);
                } else {
                    break;
                }
                //cases for greater than or equal to? how to preserve the line and bring it back up?
                // are there possible edge cases?

                //What happens if two lines are belong to the same paragraph?
                //strC = RecursiveAdder(r,reader,tab,count,strC);
                //Scenarios---------

            }
            return strC;
        }
    }

    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Tree("text.txt");
            }
        });
    }
}
